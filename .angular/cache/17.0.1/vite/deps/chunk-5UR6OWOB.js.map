{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/accordion/accordion.ts", "../../../../../../../src/cdk/accordion/accordion-item.ts", "../../../../../../../src/cdk/accordion/accordion-module.ts", "../../../../../../../src/cdk/accordion/accordion_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input({transform: booleanAttribute}) multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  booleanAttribute,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input({transform: booleanAttribute})\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["nextId$1", "CDK_ACCORDION", "InjectionToken", "CdkAccordion", "constructor", "_stateChanges", "Subject", "_openCloseAllActions", "id", "multi", "openAll", "next", "closeAll", "ngOnChanges", "changes", "ngOnDestroy", "complete", "ɵdir", "selectors", "inputs", "booleanAttribute", "exportAs", "features", "provide", "useExisting", "Directive", "args", "selector", "providers", "Input", "transform", "nextId", "CdkAccordionItem", "expanded", "_expanded", "expandedChange", "emit", "opened", "accordionId", "accordion", "_expansionDispatcher", "notify", "closed", "_changeDetectorRef", "markForCheck", "_openCloseAllSubscription", "Subscription", "EMPTY", "EventEmitter", "destroyed", "disabled", "_removeUniqueSelectionListener", "listen", "_subscribeToOpenCloseAllActions", "unsubscribe", "toggle", "close", "open", "subscribe", "ɵfac", "CdkAccordionItem_Factory", "t", "ChangeDetectorRef", "UniqueSelectionDispatcher", "outputs", "useValue", "undefined", "Optional", "Inject", "SkipSelf", "Output", "CdkAccordionModule", "ɵmod", "declarations", "exports", "NgModule"]
}
